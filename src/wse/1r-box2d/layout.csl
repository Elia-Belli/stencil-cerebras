// Color map/ WSE2 task ID map
// On WSE-2, data tasks are bound to colors (IDs 0 through 24)
//
//  ID var                ID var     ID var                ID var
//   0 east_color_1        9         18                    27 reserved (memcpy)
//   1 east_color_2       10         19                    28 reserved (memcpy)
//   2 west_color_1       11         20                    29 reserved
//   3 west_color_2       12         21 reserved (memcpy)  30 reserved (memcpy)
//   4 north_color_1      13         22 reserved (memcpy)  31 reserved
//   5 north_color_2      14         23 reserved (memcpy)  32
//   6 south_color_1      15         24                    33
//   7 south_color_2      16         25                    34
//   8                    17         26                    35

// WSE-3 task ID map
// On WSE-3, data tasks are bound to input queues (IDs 0 through 7)
//
//  ID var                  ID var  ID var                ID var
//   0 reserved (memcpy)     9      18                    27 reserved (memcpy)
//   1 reserved (memcpy)    10      19                    28 reserved (memcpy)
//   2                      11      20                    29 reserved
//   3                      12      21 reserved (memcpy)  30 reserved (memcpy)
//   4                      13      22 reserved (memcpy)  31 reserved
//   5                      14      23 reserved (memcpy)  32
//   6                      15      24                    33
//   7                      16      25                    34
//   8                      17      26                    35

param kernel_dim_x: i16;
param kernel_dim_y: i16;
param iterations: i16;
param radius: i16;

// total matrix dimensions
param M: i16;
param N: i16;

// Colors
const east_color_1: color = @get_color(0);
const east_color_2: color = @get_color(1);
const west_color_1: color = @get_color(2);
const west_color_2: color = @get_color(3);

const north_color_1: color = @get_color(4);
const north_color_2: color = @get_color(5);
const south_color_1: color = @get_color(6);
const south_color_2: color = @get_color(7);

const memcpy = @import_module("<memcpy/get_params>", .{
  .width = kernel_dim_x,
  .height = kernel_dim_y
});

layout {
  // PE coordinates are (column, row)
  @set_rectangle(kernel_dim_x, kernel_dim_y);

  // Comptime assertions
  @comptime_assert(kernel_dim_x > 1, "kernel_dim_x must be greater than 1");
  @comptime_assert(kernel_dim_y > 1, "kernel_dim_y must be greater than 1");
  @comptime_assert(M > 0, "M must be greater than 0");
  @comptime_assert(N > 0, "N must be greater than 0");
  @comptime_assert(iterations > 0, "iterations must be greater than 0");

  // pe parameters
  const pad_x = if(M % kernel_dim_x == 0) 0 else kernel_dim_x - (M % kernel_dim_x);
  const pad_y = if(N % kernel_dim_y == 0) 0 else kernel_dim_y - (N % kernel_dim_y);

  const pe_M = (M + pad_x) / kernel_dim_y; 
  const pe_N = (N + pad_y) / kernel_dim_x;

  @comptime_assert(pe_M * pe_N <= 5329, "The number of elements per cores can't exceed 5041 per core");
  @comptime_assert(pe_M >= radius and pe_N >= radius, "Each core must be able to fit the stencil radius");

  const common_params = .{
    .width = kernel_dim_x,
    .height = kernel_dim_y,
    .iterations = iterations,
    .radius = radius
  };

  const even_col_params = .{
    .send_east_color = east_color_1, .recv_west_color = east_color_2,
    .send_west_color = west_color_1, .recv_east_color = west_color_2
  };
  const odd_col_params = .{
    .send_east_color = east_color_2, .recv_west_color = east_color_1,
    .send_west_color = west_color_2, .recv_east_color = west_color_1
  };
  const even_row_params = .{
    .send_north_color = north_color_1, .recv_south_color = north_color_2,
    .send_south_color = south_color_1, .recv_north_color = south_color_2
  };
  const odd_row_params = .{
    .send_north_color = north_color_2, .recv_south_color = north_color_1,
    .send_south_color = south_color_2, .recv_north_color = south_color_1
  }; 

  // Tile Code
  for (@range(i16, kernel_dim_x)) |pe_x| {
    for (@range(i16, kernel_dim_y)) |pe_y| {
      if((pe_x % 2) == 0 and (pe_y % 2 == 0)){
        @set_tile_code(pe_x, pe_y, "pe_program.csl", @concat_structs(.{
        .memcpy_params = memcpy.get_params(pe_x),
        .M = pe_M, .N = pe_N
        }, @concat_structs(common_params, @concat_structs(even_col_params, even_row_params))));
      }else if ((pe_x % 2) == 0 and (pe_y % 2 == 1)){
        @set_tile_code(pe_x, pe_y, "pe_program.csl", @concat_structs(.{
        .memcpy_params = memcpy.get_params(pe_x),
        .M = pe_M, .N = pe_N
        }, @concat_structs(common_params, @concat_structs(even_col_params, odd_row_params))));
      }else if((pe_x % 2) == 1 and (pe_y % 2 == 0)){
        @set_tile_code(pe_x, pe_y, "pe_program.csl", @concat_structs(.{
        .memcpy_params = memcpy.get_params(pe_x),
        .M = pe_M, .N = pe_N
        }, @concat_structs(common_params, @concat_structs(odd_col_params, even_row_params))));
      }else{
        @set_tile_code(pe_x, pe_y, "pe_program.csl", @concat_structs(.{
        .memcpy_params = memcpy.get_params(pe_x),
        .M = pe_M, .N = pe_N
        }, @concat_structs(common_params, @concat_structs(odd_col_params, odd_row_params))));
      }
    }
  }

  // Routing Configurations
  for (@range(i16, kernel_dim_x)) |pe_x| {
    for (@range(i16, kernel_dim_y)) |pe_y| {
      if (pe_x % 2 == 0){
        if(pe_x == 0){
          @set_color_config(pe_x, pe_y, east_color_1, .{.routes= .{ .rx = .{RAMP}, .tx = .{EAST}}});
          @set_color_config(pe_x, pe_y, west_color_2, .{.routes= .{ .rx = .{EAST}, .tx = .{RAMP}}});
        }else if(pe_x == kernel_dim_x - 1){
          @set_color_config(pe_x, pe_y, east_color_2, .{.routes= .{ .rx = .{WEST}, .tx = .{RAMP}}});
          @set_color_config(pe_x, pe_y, west_color_1, .{.routes= .{ .rx = .{RAMP}, .tx = .{WEST}}});
        }else{
          @set_color_config(pe_x, pe_y, east_color_1, .{.routes= .{ .rx = .{RAMP}, .tx = .{EAST}}});
          @set_color_config(pe_x, pe_y, east_color_2, .{.routes= .{ .rx = .{WEST}, .tx = .{RAMP}}});
          @set_color_config(pe_x, pe_y, west_color_1, .{.routes= .{ .rx = .{RAMP}, .tx = .{WEST}}});
          @set_color_config(pe_x, pe_y, west_color_2, .{.routes= .{ .rx = .{EAST}, .tx = .{RAMP}}});
        }
      }else{
        if(pe_x == kernel_dim_x - 1){
          @set_color_config(pe_x, pe_y, east_color_1, .{.routes= .{ .rx = .{WEST}, .tx = .{RAMP}}});
          @set_color_config(pe_x, pe_y, west_color_2, .{.routes= .{ .rx = .{RAMP}, .tx = .{WEST}}});
        }else{
          @set_color_config(pe_x, pe_y, east_color_1, .{.routes= .{ .rx = .{WEST}, .tx = .{RAMP}}});
          @set_color_config(pe_x, pe_y, east_color_2, .{.routes= .{ .rx = .{RAMP}, .tx = .{EAST}}});
          @set_color_config(pe_x, pe_y, west_color_1, .{.routes= .{ .rx = .{EAST}, .tx = .{RAMP}}});
          @set_color_config(pe_x, pe_y, west_color_2, .{.routes= .{ .rx = .{RAMP}, .tx = .{WEST}}});
        }
      }

      if(pe_y % 2 == 0){
        if(pe_y == 0){
          @set_color_config(pe_x, pe_y, north_color_2, .{.routes= .{ .rx = .{SOUTH}, .tx = .{RAMP}}});
          @set_color_config(pe_x, pe_y, south_color_1, .{.routes= .{ .rx = .{RAMP}, .tx = .{SOUTH}}});
        }else if(pe_y == kernel_dim_y-1){
          @set_color_config(pe_x, pe_y, north_color_1, .{.routes= .{ .rx = .{RAMP}, .tx = .{NORTH}}});
          @set_color_config(pe_x, pe_y, south_color_2, .{.routes= .{ .rx = .{NORTH}, .tx = .{RAMP}}});
        }else{
          @set_color_config(pe_x, pe_y, north_color_1, .{.routes= .{ .rx = .{RAMP}, .tx = .{NORTH}}});
          @set_color_config(pe_x, pe_y, north_color_2, .{.routes= .{ .rx = .{SOUTH}, .tx = .{RAMP}}});
          @set_color_config(pe_x, pe_y, south_color_1, .{.routes= .{ .rx = .{RAMP}, .tx = .{SOUTH}}});
          @set_color_config(pe_x, pe_y, south_color_2, .{.routes= .{ .rx = .{NORTH}, .tx = .{RAMP}}});
        }
      }else{
        if(pe_y == kernel_dim_y-1){
          @set_color_config(pe_x, pe_y, north_color_2, .{.routes= .{ .rx = .{RAMP}, .tx = .{NORTH}}});
          @set_color_config(pe_x, pe_y, south_color_1, .{.routes= .{ .rx = .{NORTH}, .tx = .{RAMP}}});
        }else{
          @set_color_config(pe_x, pe_y, north_color_2, .{.routes= .{ .rx = .{RAMP}, .tx = .{NORTH}}});
          @set_color_config(pe_x, pe_y, north_color_1, .{.routes= .{ .rx = .{SOUTH}, .tx = .{RAMP}}});
          @set_color_config(pe_x, pe_y, south_color_1, .{.routes= .{ .rx = .{NORTH}, .tx = .{RAMP}}});
          @set_color_config(pe_x, pe_y, south_color_2, .{.routes= .{ .rx = .{RAMP}, .tx = .{SOUTH}}});
        }
      }
    }
  }
  
  
  // export symbol names
  @export_name("A", [*]f32, true);
  @export_name("c", [*]f32, true);
  @export_name("compute", fn()void);

  @export_name("maxmin_time", [*]f32, true);
}
